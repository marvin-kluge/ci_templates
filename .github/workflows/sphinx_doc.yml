name: Build Sphinx Documentation

on:
  workflow_call:
    inputs:
      PYTHON_VERSION:
        required: true
        type: string
        default: "3.10"
      USE_UV:
        required: false
        type: boolean
        default: false
      INSTALL_REQUIREMENTS:
        required: false
        type: boolean
        default: true
      EXTRA_REQUIREMENTS:
        required: false
        type: string
        default: ""
      PYTHON_PACKAGE_NAME:
        required: false
        type: string
        default: ""
    outputs:
      success:
        description: "Documentation build status"
        value: ${{ jobs.docs.outputs.success }}

jobs:
  docs:
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.set-success.outputs.result }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.PYTHON_VERSION }}

      - name: Install project
        uses: marvin-kluge/ci_templates/.github/actions/install@main
        with:
          use-uv: ${{ inputs.USE_UV }}
          install-requirements: ${{inputs.INSTALL_REQUIREMENTS}}
          extra-requirements: ${{inputs.EXTRA_REQUIREMENTS}}
      - name: Install sphinx dependencies
        run: |
          pip install sphinx==6.2.1 anybadge m2r2 sphinx-material autodoc_pydantic sphinx-rtd-theme
          if [ -f docs/requirements.txt ]; then
            pip install -r docs/requirements.txt
          else
            echo "no requirements to install"
          fi

      - name: Determine package name
        id: package-name
        run: |
          if [ -n "${{ inputs.PYTHON_PACKAGE_NAME }}" ]; then
            echo "Using provided package name"
            echo "pkg=${{ inputs.PYTHON_PACKAGE_NAME }}" >> $GITHUB_OUTPUT
          else
            pkg=$(basename $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')
            echo "Using repo name as package name: $pkg"
            echo "pkg=$pkg" >> $GITHUB_OUTPUT
          fi

      - name: Generate documentation
        run: |
          mkdir -p docs/source/code
          mkdir -p docs_output
          sphinx-apidoc -M -o docs/source/code ${{ steps.package-name.outputs.pkg }}
          sphinx-build -b html docs/source docs_output

      - name: Generate badge
        run: |
          mkdir -p docs_output
          anybadge --value="passing" --file=docs_output/doc.svg --label=documentation

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs_output
          retention-days: 1

      - name: Set output flag
        id: set-success
        run: echo "result=success" >> $GITHUB_OUTPUT
